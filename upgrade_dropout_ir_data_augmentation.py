# -*- coding: utf-8 -*-
"""upgrade dropout ir data augmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t26qFiQUtdp30_QlEoinGor7exlIEaoG

Atnaujintas Giluminio mokymosi modelis

Kas pakeista?

   Naudojami confusion_matrix, seaborn ir pandas

   Naudojama atskirame modelyje (Sequential su sluoksniais: RandomFlip, RandomRotation)

   Papildoma modelio apžvalga ir išveda tikslaus modelio veikimo (accuracy, loss) vertinimą, taip pat jis naudoja papildomus duomenis (kaip accuracy_percent ir loss_rounded)

   Įtraukiamas kerastuner modulis (HyperModel), kuris galėtų būti naudojamas hiperparametrų derinimui

   Treniravimo metu naudojamas validacijos duomenų rinkinys per validation_data=(test_images, test_labels), taip įvertinant modelio veikimą tiek treniravimo, tiek validacijos metu. Pirmame kode  naudoja validation_data per fit funkciją.

Instaliuojame keras tuner biblioteką hiperparamerų optimizavimui
"""

!pip install keras-tuner

"""Bibliotekų importavimas

---


"""

# Importuojame reikalingas bibliotekas
import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.metrics import confusion_matrix
import seaborn as sns
from kerastuner import HyperModel

"""Duomenų užkrovimas"""

# CIFAR-10 duomenų užkrovimas
(train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.cifar10.load_data()

"""Data Augmentation paruošimas"""

# Data Augmentation naudojimas kaip atskiras procesas
data_augmentation = tf.keras.Sequential([
    layers.RandomFlip("horizontal"),
    layers.RandomRotation(0.2),
    layers.RandomZoom(0.2),
    layers.RandomTranslation(0.1, 0.1),  # Pridėti vertikalią ir horizontalią perkėlimą
    layers.RandomContrast(0.2),  # Kontrasto pakeitimas
])

"""Užkrautų treniravimo duomenų normalizavimas"""

# Normalizuokime duomenis (būtina prieš treniravimą)
train_images = train_images / 255.0
test_images = test_images / 255.0

"""Modelio kūrimas su konvoliuciniais sluoksniais, Dropout, Data Augmentation."""

# Sukuriame modelį su Dropout ir Data Augmentation
model = models.Sequential([

    # Pirmas konvoliucinis sluoksnis su įvesties forma
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Dropout(0.3),  # Padidintas Dropout

    # Pritaikome Data Augmentation treniravimo metu
    layers.Lambda(lambda x: data_augmentation(x)),

    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Dropout(0.3),  # Padidintas Dropout

    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Dropout(0.3),  # Padidintas Dropout

    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.5),  # Dropout sluoksnis
    layers.Dense(10, activation='softmax')  # Softmax aktyvacija paskutiniame sluoksnyje
])

# Modelio apžvalga
model.summary()

"""Modelio treniravimas su mokymosi greičio tvarkaraščiu."""

# Mokymosi greičio sumažinimas kas epochą (Step Decay)
initial_learning_rate = 0.001
lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(
    initial_learning_rate,
    decay_steps=1000,
    decay_rate=0.96,
    staircase=True
)

"""Modelio kompiliavimas, optimizatoriaus parinkimas"""

optimizer = tf.keras.optimizers.Adam(learning_rate=lr_schedule)
model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['accuracy'])

"""Modelio treniravimas"""

# Modelio treniravimas
history = model.fit(train_images, train_labels, epochs=20, validation_data=(test_images, test_labels))

"""Modelio vertinimas Po mokymo įvertinsime modelio tikslumą su testavimo duomenimis."""

test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)
print(f'Test accuracy: {test_acc}')

"""Tikslumo ir nuostolių vizualizavimas per epochas."""

# Tikslumo ir nuostolių kreivės per epochas
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.tight_layout()
plt.show()

"""Confusion Matrix vizualizavimas ir klaidingai klasifikuotų nuotraukų analizė."""

# Sukuriame confusion matrix ir ją vizualizuojame
y_pred = model.predict(test_images)
y_pred_classes = np.argmax(y_pred, axis=1)

cm = confusion_matrix(test_labels, y_pred_classes)
plt.figure(figsize=(10, 7))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=np.arange(10), yticklabels=np.arange(10))
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()

# Klaidingai klasifikuotos nuotraukos
incorrect_indices = np.where(y_pred_classes != test_labels.flatten())[0]
incorrect_images = test_images[incorrect_indices]
incorrect_labels = test_labels[incorrect_indices]
incorrect_predictions = y_pred_classes[incorrect_indices]

plt.figure(figsize=(10, 10))
for i in range(9):
    plt.subplot(3, 3, i+1)
    plt.imshow(incorrect_images[i])
    plt.title(f"True: {incorrect_labels[i][0]}, Pred: {incorrect_predictions[i]}")
    plt.axis('off')
plt.tight_layout()
plt.show()